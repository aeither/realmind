/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as RewardsRouteImport } from './routes/rewards'
import { Route as DemoRouteImport } from './routes/demo'
import { Route as IndexRouteImport } from './routes/index'
import { Route as FarcasterIndexRouteImport } from './routes/farcaster/index'
import { Route as FarcasterQuizAppRouteImport } from './routes/farcaster/quiz-app'
import { Route as FarcasterLayoutRouteImport } from './routes/farcaster/layout'
import { Route as DemoTanstackQueryRouteImport } from './routes/demo.tanstack-query'
import { Route as DemoStartServerFuncsRouteImport } from './routes/demo.start.server-funcs'
import { Route as DemoStartApiRequestRouteImport } from './routes/demo.start.api-request'
import { ServerRoute as ApiDemoNamesServerRouteImport } from './routes/api.demo-names'
import { ServerRoute as ApiTrpcSplatServerRouteImport } from './routes/api.trpc.$'

const rootServerRouteImport = createServerRootRoute()

const RewardsRoute = RewardsRouteImport.update({
  id: '/rewards',
  path: '/rewards',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoRoute = DemoRouteImport.update({
  id: '/demo',
  path: '/demo',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const FarcasterIndexRoute = FarcasterIndexRouteImport.update({
  id: '/farcaster/',
  path: '/farcaster/',
  getParentRoute: () => rootRouteImport,
} as any)
const FarcasterQuizAppRoute = FarcasterQuizAppRouteImport.update({
  id: '/farcaster/quiz-app',
  path: '/farcaster/quiz-app',
  getParentRoute: () => rootRouteImport,
} as any)
const FarcasterLayoutRoute = FarcasterLayoutRouteImport.update({
  id: '/farcaster/layout',
  path: '/farcaster/layout',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoTanstackQueryRoute = DemoTanstackQueryRouteImport.update({
  id: '/tanstack-query',
  path: '/tanstack-query',
  getParentRoute: () => DemoRoute,
} as any)
const DemoStartServerFuncsRoute = DemoStartServerFuncsRouteImport.update({
  id: '/start/server-funcs',
  path: '/start/server-funcs',
  getParentRoute: () => DemoRoute,
} as any)
const DemoStartApiRequestRoute = DemoStartApiRequestRouteImport.update({
  id: '/start/api-request',
  path: '/start/api-request',
  getParentRoute: () => DemoRoute,
} as any)
const ApiDemoNamesServerRoute = ApiDemoNamesServerRouteImport.update({
  id: '/api/demo-names',
  path: '/api/demo-names',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiTrpcSplatServerRoute = ApiTrpcSplatServerRouteImport.update({
  id: '/api/trpc/$',
  path: '/api/trpc/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/demo': typeof DemoRouteWithChildren
  '/rewards': typeof RewardsRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/farcaster/layout': typeof FarcasterLayoutRoute
  '/farcaster/quiz-app': typeof FarcasterQuizAppRoute
  '/farcaster': typeof FarcasterIndexRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/demo': typeof DemoRouteWithChildren
  '/rewards': typeof RewardsRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/farcaster/layout': typeof FarcasterLayoutRoute
  '/farcaster/quiz-app': typeof FarcasterQuizAppRoute
  '/farcaster': typeof FarcasterIndexRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/demo': typeof DemoRouteWithChildren
  '/rewards': typeof RewardsRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/farcaster/layout': typeof FarcasterLayoutRoute
  '/farcaster/quiz-app': typeof FarcasterQuizAppRoute
  '/farcaster/': typeof FarcasterIndexRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/demo'
    | '/rewards'
    | '/demo/tanstack-query'
    | '/farcaster/layout'
    | '/farcaster/quiz-app'
    | '/farcaster'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/demo'
    | '/rewards'
    | '/demo/tanstack-query'
    | '/farcaster/layout'
    | '/farcaster/quiz-app'
    | '/farcaster'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
  id:
    | '__root__'
    | '/'
    | '/demo'
    | '/rewards'
    | '/demo/tanstack-query'
    | '/farcaster/layout'
    | '/farcaster/quiz-app'
    | '/farcaster/'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DemoRoute: typeof DemoRouteWithChildren
  RewardsRoute: typeof RewardsRoute
  FarcasterLayoutRoute: typeof FarcasterLayoutRoute
  FarcasterQuizAppRoute: typeof FarcasterQuizAppRoute
  FarcasterIndexRoute: typeof FarcasterIndexRoute
}
export interface FileServerRoutesByFullPath {
  '/api/demo-names': typeof ApiDemoNamesServerRoute
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/demo-names': typeof ApiDemoNamesServerRoute
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/demo-names': typeof ApiDemoNamesServerRoute
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/demo-names' | '/api/trpc/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/demo-names' | '/api/trpc/$'
  id: '__root__' | '/api/demo-names' | '/api/trpc/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiDemoNamesServerRoute: typeof ApiDemoNamesServerRoute
  ApiTrpcSplatServerRoute: typeof ApiTrpcSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/rewards': {
      id: '/rewards'
      path: '/rewards'
      fullPath: '/rewards'
      preLoaderRoute: typeof RewardsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo': {
      id: '/demo'
      path: '/demo'
      fullPath: '/demo'
      preLoaderRoute: typeof DemoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/farcaster/': {
      id: '/farcaster/'
      path: '/farcaster'
      fullPath: '/farcaster'
      preLoaderRoute: typeof FarcasterIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/farcaster/quiz-app': {
      id: '/farcaster/quiz-app'
      path: '/farcaster/quiz-app'
      fullPath: '/farcaster/quiz-app'
      preLoaderRoute: typeof FarcasterQuizAppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/farcaster/layout': {
      id: '/farcaster/layout'
      path: '/farcaster/layout'
      fullPath: '/farcaster/layout'
      preLoaderRoute: typeof FarcasterLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/tanstack-query': {
      id: '/demo/tanstack-query'
      path: '/tanstack-query'
      fullPath: '/demo/tanstack-query'
      preLoaderRoute: typeof DemoTanstackQueryRouteImport
      parentRoute: typeof DemoRoute
    }
    '/demo/start/server-funcs': {
      id: '/demo/start/server-funcs'
      path: '/start/server-funcs'
      fullPath: '/demo/start/server-funcs'
      preLoaderRoute: typeof DemoStartServerFuncsRouteImport
      parentRoute: typeof DemoRoute
    }
    '/demo/start/api-request': {
      id: '/demo/start/api-request'
      path: '/start/api-request'
      fullPath: '/demo/start/api-request'
      preLoaderRoute: typeof DemoStartApiRequestRouteImport
      parentRoute: typeof DemoRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/demo-names': {
      id: '/api/demo-names'
      path: '/api/demo-names'
      fullPath: '/api/demo-names'
      preLoaderRoute: typeof ApiDemoNamesServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/trpc/$': {
      id: '/api/trpc/$'
      path: '/api/trpc/$'
      fullPath: '/api/trpc/$'
      preLoaderRoute: typeof ApiTrpcSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface DemoRouteChildren {
  DemoTanstackQueryRoute: typeof DemoTanstackQueryRoute
  DemoStartApiRequestRoute: typeof DemoStartApiRequestRoute
  DemoStartServerFuncsRoute: typeof DemoStartServerFuncsRoute
}

const DemoRouteChildren: DemoRouteChildren = {
  DemoTanstackQueryRoute: DemoTanstackQueryRoute,
  DemoStartApiRequestRoute: DemoStartApiRequestRoute,
  DemoStartServerFuncsRoute: DemoStartServerFuncsRoute,
}

const DemoRouteWithChildren = DemoRoute._addFileChildren(DemoRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DemoRoute: DemoRouteWithChildren,
  RewardsRoute: RewardsRoute,
  FarcasterLayoutRoute: FarcasterLayoutRoute,
  FarcasterQuizAppRoute: FarcasterQuizAppRoute,
  FarcasterIndexRoute: FarcasterIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiDemoNamesServerRoute: ApiDemoNamesServerRoute,
  ApiTrpcSplatServerRoute: ApiTrpcSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
